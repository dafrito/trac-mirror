=  Wiki Macros =
Trac macros are plugins to extend the Trac engine with custom 'functions' written in Python. A macro inserts dynamic HTML data in any context supporting WikiFormatting.

Another kind of macros are WikiProcessors. They typically deal with alternate markup formats and representation of larger blocks of information (like source code highlighting). See also: WikiProcessors.

== Using Macros ==
Macro calls are enclosed in two ''square brackets''. Like python functions, macros can also have arguments, a comma separated list within parenthesis. 

=== Examples ===

{{{
 [[Timestamp]]
}}}
Display:
 [[Timestamp]]

{{{
 [[HelloWorld(Testing)]]
}}}
Display:
 [[HelloWorld(Testing)]]


== Available Macros ==
Macros are still a new feature, and the list of available (and distributed) macros is 
admittedly not very impressive. In future Trac releases, we hope to build a library of useful macros, and will of course happily include contributed macros (see below). 

 * '''!HelloWorld''' -- An example macro, useful for learning how to write macros.
 * '''Timestamp''' -- Insert the current date and time.


----


== Macros from around the world ==
The [http://projects.edgewall.com/trac/ Trac Project] has a section dedicated to user-contributed macros, [http://projects.edgewall.com/trac/wiki/MacroBazaar MacroBazaar]. If you're looking for new macros, or have written new ones to share with the world, don't hesitate adding it to the [http://projects.edgewall.com/trac/wiki/MacroBazaar MacroBazaar] wiki page.

  http://projects.edgewall.com/trac/wiki/MacroBazaar


----


== Developing New Macros ==
Macros, like Trac itself, are written in the [http://www.python.org/ Python programming language]. They are very simple modules, identified by the filename and should contain a single ''entry point'' function. Trac will display the returned data inserted into the HTML where the macro was called.

It's easiest to learn from an example:
{{{
# MyMacro.py -- The world's simplest macro

def execute(hdf, args, env):
    return "Hello World called with args: %s" % args
}}}

=== Advanced Topics: Template-enabled Macros ===
For advanced uses, macros can also render structured output in HDF, to be rendered to HTML using clearsilver templates - like most Trac output. In short, this allows more generic and well-designed advanced macros.

Macros gain direct access to the main HDF tree, and are free to manipulate it. 

Example:
{{{
def execute(hdf, args, env):
    # Currently hdf is set only when the macro is called
    # From a wiki page
    if hdf:
        hdf.setValue('wiki.macro.greeting', 'Hello World')
        
    # args will be null if the macro is called without parentesis.
    args = args or 'No arguments'
    return 'Hello World, args = ' + args
}}}

You can also use the environment (env) object to access configuration data.

Example.
{{{
def execute(hdf, txt, env):
    return env.get_config('trac', 'repository_dir')
}}}
----
See also:  WikiProcessors, WikiFormatting, TracGuide